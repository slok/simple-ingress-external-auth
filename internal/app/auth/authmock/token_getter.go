// Code generated by mockery v2.46.3. DO NOT EDIT.

package authmock

import (
	context "context"

	model "github.com/slok/simple-ingress-external-auth/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// TokenGetter is an autogenerated mock type for the TokenGetter type
type TokenGetter struct {
	mock.Mock
}

// GetStaticTokenValidation provides a mock function with given fields: ctx, tokenValue
func (_m *TokenGetter) GetStaticTokenValidation(ctx context.Context, tokenValue string) (*model.StaticTokenValidation, error) {
	ret := _m.Called(ctx, tokenValue)

	if len(ret) == 0 {
		panic("no return value specified for GetStaticTokenValidation")
	}

	var r0 *model.StaticTokenValidation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.StaticTokenValidation, error)); ok {
		return rf(ctx, tokenValue)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.StaticTokenValidation); ok {
		r0 = rf(ctx, tokenValue)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.StaticTokenValidation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, tokenValue)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTokenGetter creates a new instance of TokenGetter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTokenGetter(t interface {
	mock.TestingT
	Cleanup(func())
}) *TokenGetter {
	mock := &TokenGetter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
